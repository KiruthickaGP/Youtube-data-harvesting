#CODE 

# FUNCTION TO GET CHANNEL DETAILS
def get_channel_details(channel_id):
    ch_data = []
    response = youtube.channels().list(part = 'snippet,contentDetails,statistics',
                                     id= channel_id).execute()

    for i in range(len(response['items'])):
        data = dict(Channel_id = channel_id[i],
                    Channel_name = response['items'][i]['snippet']['title'],
                    Playlist_id = response['items'][i]['contentDetails']['relatedPlaylists']['uploads'],
                    Subscribers = response['items'][i]['statistics']['subscriberCount'],
                    Views = response['items'][i]['statistics']['viewCount'],
                    Total_videos = response['items'][i]['statistics']['videoCount'],
                    Description = response['items'][i]['snippet']['description'],
                    Country = response['items'][i]['snippet'].get('country')
                    )
        ch_data.append(data)
    return ch_data


# FUNCTION TO GET VIDEO IDS
def get_channel_videos(channel_id):
    video_ids = []
    # get Uploads playlist id
    res = youtube.channels().list(id=channel_id, 
                                  part='contentDetails').execute()
    playlist_id = res['items'][0]['contentDetails']['relatedPlaylists']['uploads']
    next_page_token = None
    
    while True:
        res = youtube.playlistItems().list(playlistId=playlist_id, 
                                           part='snippet', 
                                           maxResults=50,
                                           pageToken=next_page_token).execute()
        
        for i in range(len(res['items'])):
            video_ids.append(res['items'][i]['snippet']['resourceId']['videoId'])
        next_page_token = res.get('nextPageToken')
        
        if next_page_token is None:
            break
    return video_ids


# FUNCTION TO GET VIDEO DETAILS
def get_video_details(v_ids):
    video_stats = []
    
    for i in range(0, len(v_ids), 50):
        response = youtube.videos().list(
                    part="snippet,contentDetails,statistics",
                    id=','.join(v_ids[i:i+50])).execute()
        for video in response['items']:
            video_details = dict(Channel_name = video['snippet']['channelTitle'],
                                Channel_id = video['snippet']['channelId'],
                                Video_id = video['id'],
                                Title = video['snippet']['title'],
                                Thumbnail = video['snippet']['thumbnails']['default']['url'],
                                Description = video['snippet']['description'],
                                Published_date = video['snippet']['publishedAt'],
                                Duration = video['contentDetails']['duration'],
                                Views = video['statistics']['viewCount'],
                                Likes = video['statistics'].get('likeCount'),
                                Comments = video['statistics'].get('commentCount'),
                                Favorite_count = video['statistics']['favoriteCount'],
                                Definition = video['contentDetails']['definition'],
                                Caption_status = video['contentDetails']['caption']
                               )
            video_stats.append(video_details)
    return video_stats


# FUNCTION TO GET COMMENT DETAILS
def get_comments_details(v_id):
    comment_data = []
    try:
        next_page_token = None
        while True:
            response = youtube.commentThreads().list(part="snippet,replies",
                                                    videoId=v_id,
                                                    maxResults=100,
                                                    pageToken=next_page_token).execute()
            for cmt in response['items']:
                data = dict(Comment_id = cmt['id'],
                            Video_id = cmt['snippet']['videoId'],
                            Comment_text = cmt['snippet']['topLevelComment']['snippet']['textDisplay'],
                            Comment_author = cmt['snippet']['topLevelComment']['snippet']['authorDisplayName'],
                            Comment_posted_date = cmt['snippet']['topLevelComment']['snippet']['publishedAt'],
                            Like_count = cmt['snippet']['topLevelComment']['snippet']['likeCount'],
                            Reply_count = cmt['snippet']['totalReplyCount']
                           )
                comment_data.append(data)
            next_page_token = response.get('nextPageToken')
            if next_page_token is None:
                break
    except:
        pass
    return comment_data


# FUNCTION TO GET CHANNEL NAMES FROM MONGODB
def channel_names():   
    ch_name = []
    for i in db.channel_details.find():
        ch_name.append(i['Channel_name'])
    return ch_name


CODE EXPLANATION 

1.get_channel_details(channel_id):

This function takes a channel_id as input and retrieves details about a YouTube channel.
It makes a request to the YouTube API using the youtube.channels().list() method with the specified channel_id.
The function extracts various channel details such as channel name, playlist ID, subscribers, views, total videos, description, and country (if available) from the API response.
The extracted data is stored in a list of dictionaries, and the list is returned.

2.get_channel_videos(channel_id):

This function takes a channel_id as input and retrieves the video IDs associated with the channel.
It first obtains the uploads playlist ID for the channel using the youtube.channels().list() method.
Then, it retrieves video IDs from the uploads playlist using the youtube.playlistItems().list() method, iterating through pages of results if necessary.
The function returns a list of video IDs.

3.get_video_details(v_ids):

This function takes a list of video IDs (v_ids) as input and retrieves details about multiple YouTube videos.
It makes requests to the YouTube API using the youtube.videos().list() method with a maximum of 50 video IDs per request (due to API limitations).
The function extracts various video details such as channel name, channel ID, video ID, title, thumbnail URL, description, publication date, duration, views, likes, comments, favorite count, video definition, and caption status.
The extracted data is stored in a list of dictionaries, and the list is returned.

4.get_comments_details(v_id):

This function takes a video ID (v_id) as input and retrieves details about comments on a YouTube video.
It uses the youtube.commentThreads().list() method to fetch comments and their replies for the specified video.
The function iterates through pages of comments using pagination (if available) and extracts details such as comment ID, video ID, comment text, author, posting date, like count, and reply count.
The extracted comment data is stored in a list of dictionaries, and the list is returned.

5.channel_names():

This function retrieves the names of YouTube channels from a MongoDB database.
It queries the MongoDB database (db.channel_details) and collects channel names from the stored data.
The channel names are returned as a list.






